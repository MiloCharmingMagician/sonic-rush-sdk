// .bac format information

// ===================
// HEADER
// ===================

// File header, all .bac files are guaranteed to have a header this size.
struct Header
{
    u8 signature[3];            // "BAC" signature
    u8 version;                 // unsure if this is *really* a version signature, but it differs between rush & rush adventure! (00 == rush adventure/colors, 0A == rush)
    u32 animHeaderOffset;       // offset to INFO BLOCK, relative to the start of the file
    u32 animSequenceOffset;     // offset to ANIM HEADER SEQUENCE BLOCK, relative to the start of the file
    u32 frameAssemblyOffset;    // offset to SPRITE BLOCK, relative to the start of the file
    u32 paletteOffset;          // offset to PALETTE BLOCK, relative to the start of the file
    u32 spritePixelOffset;      // offset to SPRITE PIXEL BLOCK, relative to the start of the file
    u32 infoOffset;             // offset to INFO BLOCK, relative to the start of the file
}

// ===================
// COMMON
// ===================

struct CompressionHeader
{
    u32 compParam : 4;          // compression param. 4-bytes.
    u32 compType : 4;           // compression type. 4-bytes.
    u32 uncompressedSize : 24;  // uncompressed size. 24-bytes.
}

// general-purpose block header
struct BlockHeader
{
    u32 size; // size of the block, in bytes. (including the 4 bytes used in this struct)
}

struct SpritePart
{
    u32 pixelOffset; // sprite pixel information, relative to the start of "SPRITE PIXEL BLOCK"
    u16 tileCount;   // how many tiles (sets of 8x8 pixels) the sprite part contains
}

enum PixelFormat
{
    // 2D Engine Formats
    FORMAT_INDEXED4_2D,
    FORMAT_INDEXED8_2D,

    // 3D Engine Formats
    FORMAT_RGBA_2D,
    FORMAT_INDEXED2_3D,
    FORMAT_INDEXED4_3D,
    FORMAT_INDEXED8_3D,
    FORMAT_RGBA_3D,
    FORMAT_A3I5_TRANSLUCENT_3D,
    FORMAT_A5I3_TRANSLUCENT_3D,
    FORMAT_BLOCK_COMPRESSED_3D,
};

// ===================
// INFO BLOCK
// ===================

// NOTE: if the info block offset is lower than the header's size, then assume the info block doesn't exist at all!
// BAC files are generally structred like: HEADER, INFO, ANIM HEADER, ANIM SEQUENCE, SPRITE, SPRITE PALETTE, SPRITE PIXELS

struct AnimInfo
{
    // general-purpose gfx sizes(?)
    // all known values are for graphics allocation, so it's assumed that unknown values would also be used for that purpose.
    u16 gfxTileCount_2D_1D;
    u16 gfxTileCount_1D_64K;
    u16 gfxTileCount_1D_128K;
    u16 gfxTileCount_1D_256K;
    u16 unused1; // unknown, unused in rush games afaik.
    u16 unused2; // unknown, unused in rush games afaik.
    u16 unused3; // unknown, unused in rush games afaik.
    u16 palette3DSize;
    s32 texture3DSize;
};

struct InfoBlock
{
    u16 animCount;

    // general-purpose gfx sizes?
    // the values _mostly_ match up with the values in AnimInfo
    // all known values are for graphics allocation, so it's assumed that unknown values would also be used for that purpose.
    u16 gfxTileCount_2D_1D;
    u16 gfxTileCount_1D_64K;
    u16 gfxTileCount_1D_128K;
    u16 gfxTileCount_1D_256K;
    u16 unused1; // unknown, unused in rush games afaik.
    u16 unused2; // unknown, unused in rush games afaik.
    u16 unknown; // unknown. but is used in rush adventure for graphics allocation of some sort.
    u16 unused3; // unknown, unused in rush games afaik.
    u16 palette3DSize;
    s32 texture3DSize;

    // Per-anim gfx sizes
    AnimInfo anims[animCount];
};

// ===================
// ANIM HEADER BLOCK
// ===================

struct AnimHeader
{
    u32 offset; // anim sequence data offset, relative to the start of the ANIM SEQUENCE BLOCK
    PixelFormat format;
};

struct AnimHeaderBlock
{
    BlockHeader header;

    AnimHeader anims[1];
};

// ===================
// ANIM SEQUENCE BLOCK
// ===================

struct AnimCommandHeader
{
    u16 type; // command type. see "ANIM COMMANDS" for information on types
    u16 size; // size of the command data, in bytes. (including the 4 bytes used in this struct)
};

struct AnimSequenceBlock
{
    BlockHeader header;

    // this block contains a dynamic amount of commands
    // for parsing the file, continously parse each command (specified by the command's "type" variable) until the "END ANIMATION" or "END ANIMATION (CHANGE)" command appears.
    // see "ANIM COMMANDS" section for command types
    AnimCommandHeader commands[];
};

// ===================
// SPRITE BLOCK
// ===================

struct SpriteHeader
{
    u16 spriteCount;
    u16 useGFXIndex;
    s16 left;
    s16 top;
    s16 right;
    s16 bottom;
    Vec2Fx16 hotspot;
    GXOamAttr spriteList[spriteCount]; // OAM sprite attribute list
};

struct SpriteBlock
{
    BlockHeader header;

    SpriteHeader sprites[];
};

// ====================
// SPRITE PALETTE BLOCK
// ====================

struct PaletteBlock
{
    BlockHeader header;

    // all offsets to this block will point to a compression header
    // compression header contains "uncompressedSize" which in conjuction with the compression type & param, tells the decompressor how much data to read
    // standard DS compression applies: 0 => uncompressed, 1 => LZ10, 2 => huffman, 3 => RLE
    CompressionHeader palettes[];
};

// ===================
// SPRITE PIXEL BLOCK
// ===================

struct SpritePixelBlock
{
    BlockHeader header;

    // all offsets to this block will point to a compression header
    // compression header contains "uncompressedSize" which in conjuction with the compression type & param, tells the decompressor how much data to read
    // standard DS compression applies: 0 => uncompressed, 1 => LZ10, 2 => huffman, 3 => RLE
    CompressionHeader pixels[];
};

// ===================
// ANIM COMMANDS
// ===================

// TYPE 0: "END FRAME"
// marks the end of a "frame", this should always come after other commands such as "sprite parts" & "SPRITE ASSEMBLY" & etc.
// must appear once per frame.
struct AnimCommand_EndFrame
{
    AnimCommandHeader header;

    u16 animFrameCount; // how many frames are contained within the animation (value is likely the same for all frames in a given animation)
    u16 frameIndex;     // frame id in the animation
    u16 duration;       // how long this frame lasts for before changing to the next one (measured in in-game frames => 1/60th of a second)
};

// TYPE 1: "SPRITE ASSEMBLY"
// determines the frame's sprite assembly
// may appear 0-1 times per frame.
struct AnimCommand_SpriteAssembly
{
    AnimCommandHeader header;

    u32 assemblyOffset; // sprite assembly information, relative to the start of "SPRITE BLOCK"
};

// TYPE 2: "SPRITE PARTS"
// determines the frame's sprite graphics
// may appear 0-1 times per frame.
struct AnimCommand_SpriteParts
{
    AnimCommandHeader header;

    // list of sprite parts
    // NOTE: this list size may _not_ be the same value as the corresponding "SpriteHeader.spriteCount".
    // in that case, "SpriteHeader.spriteCount" should take priority. (The GXOamAttr sprites may use the same pixel offset)
    SpritePart parts[(header.size - 4) / 8];
};

// TYPE 3: "SPRITE PALETTE"
// determines the frame's sprite palette
// may appear 0-1 times per frame.
typedef struct AnimCommand_Palette
{
    AnimCommandHeader header;

    u32 paletteOffset;  // palette information, relative to the start of "SPRITE PALETTE BLOCK"
    u16 unknown;        // unknown, not used in-game, but does appear to be set?
    u16 colorCount;     // how many colours in the palette
};

// TYPE 4: "END ANIMATION"
// completes an animation and loops back to a previous frame
// must appear before any other frame information, and after an "END FRAME" command.
struct AnimCommand_EndAnimation
{
    AnimCommandHeader header;

    u32 loopPoint; // animation loop point, relative to the start of ANIM SEQUENCE BLOCK
};

// TYPE 5: Unused.
// Not Implemented.
struct AnimCommand_Block5
{
    AnimCommandHeader header;
};

// TYPE 6: CUSTOM 1.
// Per-game assignable command 1, not implemented in any rush game.
struct AnimCommand_Custom1
{
    AnimCommandHeader header;
};

// TYPE 7: CUSTOM 2 (HITBOX).
// Per-game assignable command 2, assigned to hitboxes in rush games.
// may appear none, once, or multiple times per-frame. 'id' will determine what hitbox is being read.
struct AnimCommand_Custom1
{
    AnimCommandHeader header;

    u16 id;             // hitbox id
    u16 unused;         // padding(?)
    s16 hitboxLeft;     // hitbox left offset, relative to the sprite center
    s16 hitboxTop;      // hitbox top offset, relative to the sprite center
    s16 hitboxRight;    // hitbox right offset, relative to the sprite center
    s16 hitboxBottom;   // hitbox bottom offset, relative to the sprite center
};

// TYPE 8: CUSTOM 3.
// Per-game assignable command 3, not implemented in any rush game.
struct AnimCommand_Custom1
{
    AnimCommandHeader header;
};

// TYPE 9: "END ANIMATION (CHANGE)"
// completes an animation and loops back to a previous frame
// must appear before any other frame information, and after an "END FRAME" command.
struct AnimCommand_EndAnimation2
{
    AnimCommandHeader header;

    u16 nextAnimation;  // next animation id to jump to (jumps to frame 0)
    u16 _padding;       // padding. unused?
};

// TYPE 10: Unused.
// Not Implemented.
struct AnimCommand_Block10
{
    AnimCommandHeader header;
};

// TYPE 11: Unused.
// Not Implemented.
struct AnimCommand_Block11
{
    AnimCommandHeader header;
};